general:
    expt_name: qk_regtr_full_kitti_dual_norm

dataset:
    dataset: kitti
    root: /work/vig/Datasets/KITTI_Odometry
    validation_seq: "01"
    augment_noise: 0.01
    perturb_pose: large
    train_batch_size: 1
    val_batch_size: 1
    test_batch_size: 1
    downsample: True
    alpha: 0.5
    beta: 1.5
    crop_radius: 0.0
    remove_ground: False
    grid_size: 0.02

train_options:
    niter: -150  # 400 epochs

solver:
    optimizer: AdamW
    base_lr: 0.0001
    weight_decay: 0.0001
    grad_clip: 0.1
    scheduler: 'step'
    scheduler_param: [135800, 0.5] # Decay by 0.5 every 10 epochs


# Use a shallower backbone to maintain resolution
pointformer_options:
    in_channels: 3
    stride: [ 2, 2, 2, 2 ]
    enc_depths: [ 2, 2, 2, 6, 2 ]
    enc_channels: [ 48, 96, 192, 384, 768 ]
    enc_num_head: [ 2, 4, 8, 16, 32 ]
    enc_patch_size: [ 1024, 1024, 1024, 1024, 1024 ]
    mlp_ratio: 4
    qkv_bias: True
    qk_scale: None
    attn_drop: 0.0
    proj_drop: 0.0
    drop_path: 0.3
    pre_norm: True
    shuffle_orders: True
    enable_rpe: False
    enable_flash: False
    # Network can be made a little larger.

lgr:
    use_lgr: False
    num_refinement_steps: 10
    acceptance_radius: 0.6

ransac:
    use_ransac: False

model:
    model: qk_regtr_full.RegTR
    
    remove_points_from_val: False
    val_threshold: 0.25

    # Threshold Correlation values
    threshold_corr: False
    corr_threshold: 0.1

    # Use Overlap values to remove outliers
    remove_outliers_overlap: False
    overlap_threshold: 0.5
    use_overlap_as_weights: False

    # Lowe's ratio test
    use_ratio_test: False
    lowe_thres: 0.9

    # Sinkhorn
    use_sinkhorn: False
    sinkhorn_itr: 3
    slack: True
    use_attn_affinity: False
    use_corr_affinity: False

    # Transformer
    attention_type: dot_prod
    nhead: 8
    d_embed: 256
    d_feedforward: 1024
    dropout: 0.0  # dropout not compatible
    pre_norm: True
    transformer_act: relu

    # Transformer encoder
    num_encoder_layers: 6
    transformer_encoder_has_pos_emb: True
    sa_val_has_pos_emb: True
    ca_val_has_pos_emb: True
    pos_emb_type: sine  # either 'sine' or 'learned'

    # Correspondence decoding
    corr_decoder_has_pos_emb: True
    direct_regress_coor: True  # Whether to regress coordinates using MLP (True) or a final attention layer (False)


losses:
    inlier_loss_on: False
    # Overlap loss
    wt_overlap: 1.0
    overlap_loss_pyr: 3
    overlap_loss_on: [5]  # Apply loss on only final output

    # Feature loss - I use the following thresholds
    # Voxel sizes at different octaves: (0) 0.3 (1) 0.6 (2) 1.2 (3) 2.4  
    # Voxel sizes at different octaves: (0) 0.2 (1) 0.4 (2) 0.8 (3) 1.6  
    # Voxel sizes at different octaves: (0) 0.1 (1) 0.2 (2) 0.4 (3) 0.8  
    # r_p and r_n are set to 1x and 2.0x the voxel sizes respectively
    wt_feature: 0.1
    wt_feature_un: 0.0
    r_p: 1.6
    r_n: 3.2
    feature_loss_on: [0]
    feature_loss_type: infonce

    # Correspondence loss
    wt_corr: 1.0
    corr_loss_on: [5]


validation:
    # Registration success criteria. We use this to pick the best checkpoint
    reg_success_thresh_rot: 5
    reg_success_thresh_trans: 2
